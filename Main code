
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Load datasets
movies = pd.read_csv("/content/tmdb_5000_movies.csv")
credits = pd.read_csv("/content/tmdb_5000_credits.csv")

# Merge datasets on movie ID
movies = movies.merge(credits, left_on='id', right_on='movie_id', how='left')

# Keep useful numeric and date columns
movies = movies[['budget', 'revenue', 'popularity', 'runtime', 'vote_average', 'vote_count', 'release_date']]
movies.dropna(inplace=True)

# Convert release_date to release_year
movies['release_date'] = pd.to_datetime(movies['release_date'])
movies['release_year'] = movies['release_date'].dt.year
movies.drop('release_date', axis=1, inplace=True)

# Ensure numeric types
movies['budget'] = movies['budget'].astype(float)
movies['revenue'] = movies['revenue'].astype(float)

# Define features and target
X = movies.drop('revenue', axis=1)
y = movies['revenue']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, max_depth=10,random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print("Mean Absolute Error:", mean_absolute_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))

# Plot actual vs predicted revenue
plt.figure(figsize=(8,6),dpi=300)
plt.scatter(y_test, y_pred, alpha=0.5, color='purple')
plt.xlabel("Actual Revenue")
plt.ylabel("Predicted Revenue")
plt.title("Actual vs Predicted Movie Revenue (Random Forest)")
plt.show()
